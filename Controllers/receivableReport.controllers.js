const mssql = require('mssql');

exports.getDebtorsAgeing = (req, res) =>
{
    // Validate request
    console.log(`Fetching RESPONSE`);
    // create Request object
    var request = new mssql.Request();
    // query to the database and get the records
    const queryStr = `SELECT A.CUST_CODE, A.CUST_NAME, A.TYPE,A.INV_NO, A.INV_DATE, A.INV_AMOUNT AMOUNT, A.DEBIT,
    A.CREDIT, A.BALANCE, A.INV_BALANCE,A.UNALLOC_BALANCE,
    CONVERT(DATE,'${req.params.fromDate}') REPORT_START_DATE,CONVERT(DATE,'${req.params.toDate}') REPORT_END_DATE FROM ( 
    SELECT O.COMP_CODE, O.CUST_CODE, O.INV_NO,CASE WHEN O.TYPE='S' THEN ISNULL(O.VENDOR_REF_DATE,O.INV_DATE)
    ELSE O.INV_DATE END INV_DATE, ISNULL(O.VENDOR_REF_NO,'') VENDOR_REF_NO, O.VENDOR_REF_DATE, 
    SUM(CASE WHEN O.TYPE='C' THEN ISNULL(O.AMOUNT,0) ELSE ISNULL(O.REFAMOUNT,0) END) DEBIT, 
    SUM(CASE WHEN O.TYPE='C' THEN ISNULL(O.REFAMOUNT,0) ELSE ISNULL(O.AMOUNT,0) END) CREDIT, 
    SUM(ISNULL(O.AMOUNT,0)-ISNULL(O.REFAMOUNT,0)) BALANCE, SUM(CASE WHEN ISNULL(O.INV_NO,'')<>ISNULL(O.REFNO,'')
    THEN ISNULL(O.AMOUNT,0)-ISNULL(O.REFAMOUNT,0) ELSE 0 END) INV_BALANCE,
    SUM(CASE WHEN ISNULL(O.INV_NO,'')=ISNULL(O.REFNO,'') THEN ISNULL(O.REFAMOUNT,0) ELSE 0 END) UNALLOC_BALANCE,
    SUM(ISNULL(O.INV_AMOUNT,0)) INV_AMOUNT, SUM(ISNULL(O.REFAMOUNT,0)) REFAMOUNT,MAX(ISNULL(O.LPO_NO,'')) LPO_NO,
    MAX(ISNULL(O.DESCRIPTION,'')) DESCRIPTION, SUM(ISNULL(O.AMOUNT,0)) AMOUNT, ISNULL((SELECT MAX(I.CUST_REF_NO) 
    FROM SALES I WHERE I.COMP_CODE=O.COMP_CODE AND I.TRN_NO=O.INV_NO),'') CUST_REF_NO, O.CUST_NAME, O.TYPE,
    O.ACCOUNT_CATEGORY_DESC, O.ACCOUNT_TYPE_DESC, O.BRANCH_NAME, O.ADD1, O.ADD2, O.ADD3, O.POBOX, O.PHONE1, O.PHONE2,
    O.FAX1, O.FAX2, O.EMAIL, O.MOBILE, O.CONTACT, O.CREDITPERIOD, O.CR_LIMIT FROM ( SELECT OP.COMP_CODE, OP.PCODE CUST_CODE,
    CASE WHEN O.INV_DATE<='${req.params.toDate}' THEN INV_NO ELSE REFNO END INV_NO, CASE WHEN O.INV_DATE<='${req.params.toDate}' THEN 
    (CASE WHEN OP.TYPE='S' THEN ISNULL(O.VENDOR_REF_DATE,O.INV_DATE) ELSE O.INV_DATE END) ELSE REFDT END INV_DATE, 
    CASE WHEN O.INV_DATE<='${req.params.toDate}' THEN ISNULL(O.INV_AMOUNT,0) ELSE 0 END INV_AMOUNT,CASE WHEN O.REFDT<='${req.params.toDate}' THEN
    O.REFNO ELSE NULL END REFNO,CASE WHEN O.REFDT<='${req.params.toDate}' THEN O.REFDT ELSE NULL END REFDT, CASE WHEN
    O.REFDT<='${req.params.toDate}' THEN ISNULL(O.REFAMOUNT,0) ELSE 0 END REFAMOUNT,ISNULL(O.VENDOR_REF_NO,'') VENDOR_REF_NO, 
    O.VENDOR_REF_DATE, ISNULL(O.LPO_NO,'') LPO_NO, ISNULL(O.DESCRIPTION,'') DESCRIPTION, CASE WHEN O.INV_DATE<='${req.params.toDate}'
    THEN ISNULL(O.AMOUNT,0) ELSE 0 END AMOUNT,CASE WHEN RTRIM(OP.TITLE)<>'' THEN RTRIM(OP.TITLE)+' '+OP.CUST_NAME ELSE 
    OP.CUST_NAME END CUST_NAME, OP.TYPE, OP.ACCOUNT_CATEGORY_DESC, OP.ACCOUNT_TYPE_DESC, OP.BRANCH_NAME, OP.ADD1, OP.ADD2, 
    OP.ADD3, OP.POBOX, OP.PHONE1, OP.PHONE2, OP.FAX1, OP.FAX2, OP.EMAIL, OP.MOBILE, OP.CONTACT, OP.CREDITPERIOD, OP.CR_LIMIT 
    FROM vwOpbal OP JOIN OUTSTANDING O ON OP.COMP_CODE=O.COMPCODE AND OP.PCODE=O.CUST_CODE 	AND ( O.INV_DATE<='${req.params.toDate}' OR
    O.REFDT<='${req.params.toDate}') WHERE OP.COMP_CODE='${req.params.strcompCode}' AND OP.FYEAR='${req.params.stryear}' AND OP.TYPE='C' ) O 	
    GROUP BY O.COMP_CODE, O.CUST_CODE, O.INV_NO, O.INV_DATE, ISNULL(O.VENDOR_REF_NO,''), O.VENDOR_REF_DATE, O.CUST_NAME, 
    O.TYPE, O.ACCOUNT_CATEGORY_DESC, O.ACCOUNT_TYPE_DESC, O.BRANCH_NAME, O.ADD1, O.ADD2, O.ADD3, O.POBOX, O.PHONE1, O.PHONE2,
    O.FAX1, O.FAX2, O.EMAIL, O.MOBILE, O.CONTACT, O.CREDITPERIOD, O.CR_LIMIT 
    HAVING SUM(ISNULL(AMOUNT,0))<>SUM(ISNULL(O.REFAMOUNT,0)) 		) A 
    LEFT OUTER JOIN PARTY P ON A.COMP_CODE=P.COMP_CODE AND P.TYPE=A.TYPE AND A.CUST_CODE=P.PCODE AND P.PARTY_ID IN 
    (SELECT TOP 1 P2.PARTY_ID FROM PARTY P2 WHERE P2.COMP_CODE=P.COMP_CODE AND P2.TYPE=P.TYPE AND P2.PCODE=P.PCODE AND P2.IS_PRIMARY=1)`;
    request.query(queryStr, function (err, recordset) {
       if(err)
       {
           console.log(error);
       }
       else
       {
           if (recordset.recordset.toString() == '')
           {
               console.log("Data for your request is empty");
           }
           res.send(recordset);
       }
   });
};
